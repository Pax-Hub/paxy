on:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Validation

jobs:

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - id: checkout_step
        name: Checkout Git Repository
        uses: actions/checkout@v2
      - id: install_toolchain_step
        name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true          
          components: rustfmt
      - id: cargo_fmt_step
        name: Cargo Fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --verbose -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - id: checkout_step
        name: Checkout Git Repository
        uses: actions/checkout@v2
      - id: install_toolchain_step
        name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true          
          components: clippy       
      - id: clippy_step
        name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace -- -D warnings

  check:
    name: Check
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-unknown-linux-gnu
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu            
            os: ubuntu-latest 
          - target: x86_64-pc-windows-msvc 
            os: windows-latest           
          - target: x86_64-apple-darwin
            os: macos-latest             
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest                   
    runs-on: ${{ matrix.os }}
    env:
      IS_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'aarch64-apple-darwin' }}
    steps:
      - id: checkout_step
        name: Checkout Git Repository
        uses: actions/checkout@v2
      - id: install_toolchain_step
        name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - id: setup_macos_aarch64_docker_step
        name: Setup MacOS ARM Docker Image
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        uses: actions-rs/cargo@v1
        with:          
          command: build-docker-image          
          args: aarch64-apple-darwin-cross --tag local
      - id: cargo_check_step
        name: Cargo Check
        uses: actions-rs/cargo@v1
        with:          
          command: check
          use-cross: ${{ env.IS_CROSS }}
          args: --workspace --target ${{ matrix.target }}              

  test:
    name: Test
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-unknown-linux-gnu
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu            
            os: ubuntu-latest 
          - target: x86_64-pc-windows-msvc 
            os: windows-latest           
          - target: x86_64-apple-darwin
            os: macos-latest             
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest                   
    runs-on: ${{ matrix.os }}
    env:
      IS_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'aarch64-apple-darwin' }}
    steps:
      - id: checkout_step
        name: Checkout Git Repository
        uses: actions/checkout@v2
      - id: install_toolchain_step
        name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - id: setup_macos_aarch64_docker_step
        name: Setup MacOS ARM Docker Image
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        uses: actions-rs/cargo@v1
        with:          
          command: build-docker-image          
          args: aarch64-apple-darwin-cross --tag local          
      - id: cargo_test_step
        name: Cargo Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          use-cross: ${{ env.IS_CROSS }}
          args: --workspace --target ${{ matrix.target }}

  grcov:
    name: grcov Code Coverage
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-unknown-linux-gnu
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu            
            os: ubuntu-latest 
          - target: x86_64-pc-windows-msvc 
            os: windows-latest           
          - target: x86_64-apple-darwin
            os: macos-latest             
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest                   
    runs-on: ${{ matrix.os }}
    env:
      IS_CROSS: ${{ matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'aarch64-apple-darwin' }}
    steps:
      - id: checkout_step
        name: Checkout Git Repository
        uses: actions/checkout@v2
      - id: install_toolchain_step
        name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly # Required for -Zprofile
          override: true
          target: ${{ matrix.target }}
      - id: setup_macos_aarch64_docker_step
        name: Setup MacOS ARM Docker Image
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        uses: actions-rs/cargo@v1
        with:          
          command: build-docker-image          
          args: aarch64-apple-darwin-cross --tag local          
      - id: cross_installation_step # Needs to be separate because the next step fails if cross is installed automatically when Z flags are enabled
        name: Install Cross
        uses: actions-rs/cargo@v1    
        with:
          use-cross: ${{ env.IS_CROSS }}
      - id: execute_tests_step
        name: Execute tests
        uses: actions-rs/cargo@v1    
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"            
        with:          
          command: test
          use-cross: ${{ env.IS_CROSS }}
          args: --workspace --target ${{ matrix.target }}
      - id: preinstall_grcov_step
        name: Pre-Installing grcov
        uses: actions-rs/install@v0.1
        with:
          crate: grcov
          use-tool-cache: true
      - id: coverage_gather_step
        name: Gather Coverage Data
        uses: actions-rs/grcov@v0.1
        with:
          coveralls-token: ${{ secrets.COVERALLS_TOKEN }}
      - id: coveralls_upload_step
        name: Coveralls Upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel: true
          path-to-lcov: ${{ steps.coverage_gather_step.outputs.report }}

  grcov_finalize:
    name: Finalize grcov Code Coverage
    runs-on: ubuntu-latest
    needs: grcov
    steps:
      - id: coveralls_finalization_step 
        name: Coveralls Finalization
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true          